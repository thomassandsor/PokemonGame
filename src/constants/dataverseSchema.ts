// Comprehensive Dataverse Schema Mappings for Pokemon Game
// This file defines all table schemas, field types, and mappings used across the application

/**
 * DATAVERSE FIELD TYPES
 * Maps to actual Dataverse column types to ensure proper data handling
 */
export enum DataverseFieldType {
  // Text types
  SingleLineText = 'single_line_text',
  MultipleLineText = 'multiple_line_text', 
  Email = 'email',
  URL = 'url',
  
  // Number types
  WholeNumber = 'whole_number',
  DecimalNumber = 'decimal_number',
  Currency = 'currency',
  
  // Date/Time
  DateOnly = 'date_only',
  DateTime = 'date_time',
  
  // Choice types
  Picklist = 'picklist',
  Status = 'status',
  State = 'state',
  TwoOptions = 'two_options', // Boolean
  
  // Lookup/Reference types
  Lookup = 'lookup',
  Customer = 'customer',
  Owner = 'owner',
  
  // Special types
  UniqueIdentifier = 'unique_identifier',
  Image = 'image',
  File = 'file'
}

/**
 * POKEMON MASTER TABLE (pokemon_pokemon)
 * Core Pokemon data from PokeAPI - CURRENT FIELDS ONLY
 */
export const PokemonMasterSchema = {
  tableName: 'pokemon_pokemons',
  primaryKey: 'pokemon_pokemonid',
  fields: {
    // Primary key
    pokemon_pokemonid: {
      type: DataverseFieldType.UniqueIdentifier,
      required: false, // Auto-generated by Dataverse
      systemField: true,
      description: 'Primary key (auto-generated GUID)'
    },
    
    // Basic Pokemon info (EXISTING FIELDS)
    pokemon_id: {
      type: DataverseFieldType.WholeNumber,
      required: true,
      description: 'Pokemon ID from PokeAPI (1-1010)'
    },
    pokemon_name: {
      type: DataverseFieldType.SingleLineText,
      required: true,
      maxLength: 100,
      description: 'Pokemon name'
    },
    
    // System fields
    createdon: {
      type: DataverseFieldType.DateTime,
      required: false,
      systemField: true
    },
    modifiedon: {
      type: DataverseFieldType.DateTime,
      required: false,
      systemField: true
    }
  }
} as const;

/**
 * POKEMON POKEDEX TABLE (pokemon_pokedex)
 * Junction table for user-owned Pokemon
 */
export const PokemonPokedexSchema = {
  tableName: 'pokemon_pokedexes',
  primaryKey: 'pokemon_pokedexid',
  fields: {
    // Primary key
    pokemon_pokedexid: {
      type: DataverseFieldType.UniqueIdentifier,
      required: false, // Auto-generated by Dataverse
      systemField: true,
      description: 'Primary key (auto-generated autonumber)'
    },
    
    // Relationships
    pokemon_user: {
      type: DataverseFieldType.Lookup,
      required: true,
      referenceTo: 'contact',
      description: 'Lookup to user who owns this Pokemon'
    },
    pokemon_pokemon: {
      type: DataverseFieldType.Lookup,
      required: true,
      referenceTo: 'pokemon_pokemon',
      description: 'Lookup to master Pokemon data'
    },
    
    // Instance-specific data
    pokemon_level: {
      type: DataverseFieldType.WholeNumber,
      required: false,
      description: 'Current level (1-100)'
    },
    pokemon_experience: {
      type: DataverseFieldType.WholeNumber,
      required: false,
      description: 'Current experience points'
    },
    pokemon_nickname: {
      type: DataverseFieldType.SingleLineText,
      required: false,
      maxLength: 50,
      description: 'Custom nickname for this Pokemon'
    },
    pokemon_is_shiny: {
      type: DataverseFieldType.TwoOptions,
      required: false,
      description: 'Whether this Pokemon is shiny'
    },
    
    // Current stats (may differ from base due to level/training)
    pokemon_current_hp: {
      type: DataverseFieldType.WholeNumber,
      required: false,
      description: 'Current HP value'
    },
    pokemon_max_hp: {
      type: DataverseFieldType.WholeNumber,
      required: false,
      description: 'Maximum HP at current level'
    },
    
    // Capture info
    pokemon_caught_date: {
      type: DataverseFieldType.DateTime,
      required: false,
      description: 'When this Pokemon was caught'
    },
    pokemon_caught_location: {
      type: DataverseFieldType.SingleLineText,
      required: false,
      maxLength: 100,
      description: 'Where this Pokemon was caught'
    },
    
    // System fields
    createdon: {
      type: DataverseFieldType.DateTime,
      required: false,
      systemField: true
    },
    modifiedon: {
      type: DataverseFieldType.DateTime,
      required: false,
      systemField: true
    },
    ownerid: {
      type: DataverseFieldType.Owner,
      required: false,
      systemField: true
    }
  }
} as const;

/**
 * POKEMON BATTLE TABLE (pokemon_battle)
 * Battle challenges and results - CURRENT FIELDS ONLY
 */
export const PokemonBattleSchema = {
  tableName: 'pokemon_battles',
  primaryKey: 'pokemon_battleid',
  fields: {
    // Primary key  
    pokemon_battleid: {
      type: DataverseFieldType.UniqueIdentifier,
      required: false, // Auto-generated autonumber by Dataverse
      systemField: true,
      description: 'Primary key (auto-generated autonumber)'
    },
    
    // Player relationships (EXISTING FIELDS)
    pokemon_player1: {
      type: DataverseFieldType.Lookup,
      required: true,
      referenceTo: 'contact',
      description: 'Lookup to first player (challenge creator)'
    },
    pokemon_player1pokemon: {
      type: DataverseFieldType.Lookup,
      required: true,
      referenceTo: 'pokemon_pokedex',
      description: 'Lookup to first player\'s Pokemon'
    },
    pokemon_player2: {
      type: DataverseFieldType.Lookup,
      required: false,
      referenceTo: 'contact',
      description: 'Lookup to second player (challenge accepter)'
    },
    pokemon_player2pokemon: {
      type: DataverseFieldType.Lookup,
      required: false,
      referenceTo: 'pokemon_pokedex',
      description: 'Lookup to second player\'s Pokemon'
    },
    
    // Battle results (EXISTING FIELDS)
    pokemon_battleresult: {
      type: DataverseFieldType.MultipleLineText,
      required: false,
      description: 'JSON string containing battle steps and results'
    },
    pokemon_winnercontact: {
      type: DataverseFieldType.Lookup,
      required: false,
      referenceTo: 'contact',
      description: 'Lookup to winning player'
    },
    pokemon_winnerpokemon: {
      type: DataverseFieldType.Lookup,
      required: false,
      referenceTo: 'pokemon_pokedex',
      description: 'Lookup to winning Pokemon'
    },
    
    // Challenge configuration (EXISTING FIELDS)
    pokemon_challengetype: {
      type: DataverseFieldType.Picklist,
      required: false, // Has default value
      description: 'Type of challenge (1=PVP, 2=Training)',
      options: {
        1: 'PVP',
        2: 'Training'
      }
    },
    
    // Status tracking (EXISTING FIELDS)
    statuscode: {
      type: DataverseFieldType.Status,
      required: false, // Has default value
      description: 'Battle status (1=Open, 895550001=Completed)',
      options: {
        1: 'Open',
        895550001: 'Completed'
      }
    },
    statecode: {
      type: DataverseFieldType.State,
      required: false, // Defaults to Active
      description: 'Record state (0=Active, 1=Inactive)',
      options: {
        0: 'Active',
        1: 'Inactive'
      }
    },
    
    // System fields
    createdon: {
      type: DataverseFieldType.DateTime,
      required: false,
      systemField: true
    },
    modifiedon: {
      type: DataverseFieldType.DateTime,
      required: false,
      systemField: true
    },
    createdby: {
      type: DataverseFieldType.Lookup,
      required: false,
      systemField: true,
      referenceTo: 'systemuser'
    },
    modifiedby: {
      type: DataverseFieldType.Lookup,
      required: false,
      systemField: true,
      referenceTo: 'systemuser'
    },
    ownerid: {
      type: DataverseFieldType.Owner,
      required: false,
      systemField: true
    }
  }
} as const;

/**
 * TYPE-SAFE INTERFACES GENERATED FROM SCHEMA
 */

// Pokemon Master table interface - CURRENT FIELDS ONLY
export interface PokemonMasterRecord {
  pokemon_pokemonid?: string;
  pokemon_id: number;
  pokemon_name: string;
  createdon?: string;
  modifiedon?: string;
}

// Pokemon Pokedex table interface
export interface PokemonPokedexRecord {
  pokemon_pokedexid?: string;
  pokemon_user: string; // GUID
  pokemon_pokemon: string; // GUID
  pokemon_level?: number;
  pokemon_experience?: number;
  pokemon_nickname?: string;
  pokemon_is_shiny?: boolean;
  pokemon_current_hp?: number;
  pokemon_max_hp?: number;
  pokemon_caught_date?: string;
  pokemon_caught_location?: string;
  createdon?: string;
  modifiedon?: string;
  ownerid?: string;
}

// Pokemon Battle table interface - CURRENT FIELDS ONLY
export interface PokemonBattleRecord {
  pokemon_battleid?: string; // Optional for creation, required when returned
  pokemon_player1: string;
  pokemon_player1pokemon: string;
  pokemon_player2?: string;
  pokemon_player2pokemon?: string;
  pokemon_battleresult?: string;
  pokemon_winnercontact?: string;
  pokemon_winnerpokemon?: string;
  pokemon_challengetype?: 1 | 2; // 1=PVP, 2=Training (optional, has default)
  statuscode?: 1 | 895550001; // 1=Open, 895550001=Completed (optional, has default)
  statecode?: 0 | 1; // 0=Active, 1=Inactive (optional, defaults to Active)
  createdon?: string;
  modifiedon?: string;
  createdby?: string;
  modifiedby?: string;
  ownerid?: string;
}

/**
 * VALIDATION UTILITIES
 */
export class DataverseValidator {
  
  static validatePokemonMaster(data: Partial<PokemonMasterRecord>): { valid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!data.pokemon_id || data.pokemon_id < 1 || data.pokemon_id > 1010) {
      errors.push('pokemon_id must be between 1 and 1010');
    }
    
    if (!data.pokemon_name || data.pokemon_name.length === 0) {
      errors.push('pokemon_name is required');
    }
    
    if (data.pokemon_name && data.pokemon_name.length > 100) {
      errors.push('pokemon_name must be 100 characters or less');
    }
    
    return { valid: errors.length === 0, errors };
  }
  
  static validatePokemonPokedex(data: Partial<PokemonPokedexRecord>): { valid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!data.pokemon_user) {
      errors.push('pokemon_user (trainer ID) is required');
    }
    
    if (!data.pokemon_pokemon) {
      errors.push('pokemon_pokemon (master Pokemon ID) is required');
    }
    
    if (data.pokemon_level && (data.pokemon_level < 1 || data.pokemon_level > 100)) {
      errors.push('pokemon_level must be between 1 and 100');
    }
    
    if (data.pokemon_nickname && data.pokemon_nickname.length > 50) {
      errors.push('pokemon_nickname must be 50 characters or less');
    }
    
    return { valid: errors.length === 0, errors };
  }
  
  static validatePokemonBattle(data: Partial<PokemonBattleRecord>): { valid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!data.pokemon_player1) {
      errors.push('pokemon_player1 is required');
    }
    
    if (!data.pokemon_player1pokemon) {
      errors.push('pokemon_player1pokemon is required');
    }
    
    if (data.pokemon_challengetype !== undefined && ![1, 2].includes(data.pokemon_challengetype)) {
      errors.push('pokemon_challengetype must be 1 (PVP) or 2 (Training)');
    }
    
    if (data.statuscode !== undefined && ![1, 895550001].includes(data.statuscode)) {
      errors.push('statuscode must be 1 (Open) or 895550001 (Completed)');
    }
    
    if (data.statecode !== undefined && ![0, 1].includes(data.statecode)) {
      errors.push('statecode must be 0 (Active) or 1 (Inactive)');
    }
    
    return { valid: errors.length === 0, errors };
  }
}

/**
 * OData QUERY BUILDERS
 * Helper functions to build consistent OData queries
 */
export class DataverseQueryBuilder {
  
  static getAllPokemon(orderBy: string = 'pokemon_id'): string {
    return `${PokemonMasterSchema.tableName}?$orderby=${orderBy}`;
  }
  
  static getPokemonById(id: string): string {
    return `${PokemonMasterSchema.tableName}(${id})`;
  }
  
  static getUserPokedex(userId: string): string {
    return `${PokemonPokedexSchema.tableName}?$filter=_pokemon_user_value eq '${userId}'&$expand=pokemon_Pokemon&$orderby=createdon desc`;
  }
  
  static getOpenBattleChallenges(): string {
    // Filter for battles that are in "Open" status and active state
    // Use the working expand pattern with correct navigation property names
    return `${PokemonBattleSchema.tableName}?$filter=statuscode eq 1 and statecode eq 0&$expand=pokemon_Player1($select=firstname),pokemon_Player1Pokemon($expand=pokemon_Pokemon($select=pokemon_name))&$orderby=createdon desc`;
  }
  
  static getUserBattles(userId: string): string {
    return `${PokemonBattleSchema.tableName}?$filter=(pokemon_player1 eq '${userId}' or pokemon_player2 eq '${userId}')&$orderby=modifiedon desc`;
  }
}
